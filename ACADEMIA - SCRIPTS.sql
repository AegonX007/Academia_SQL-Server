CREATE VIEW uV_PACOTE_INFO AS
SELECT  P.TIPO_PAC AS "PACOTE", 
        P.[VALOR],
		P.DESCRICAO AS "BENEFÍCIOS",
        COUNT(*) AS "QUANTIDADE"
FROM PACOTE AS P
    INNER JOIN ALUNO A
        ON P.[COD_PACOTE] = A.[COD_PACOTE]
GROUP BY P.TIPO_PAC, P.[VALOR], P.DESCRICAO
 
SELECT * FROM uV_PACOTE_INFO


-- TURMA + INSTRUTOR + MONITOR + ENDEREÇO 
CREATE VIEW uV_TURMA_INFO AS
SELECT	T.COD_TURMA ,
		T.QNT_ALUNO,
		T.HORARIO,
		T.TIPO_TURMA,
		DBO.uF_STATUS(T.STATUS_TURMA) AS "STATUS",
		IP.NOME AS "INSTRUTOR",
		(IE.RUA + ', nº ' + CAST(IE.NUMERO AS VARCHAR) + ' - ' +
		IE.BAIRRO + ' - ' + IE.CIDADE + ' - ' + IE.ESTADO) AS "ENDEREÇO DO INSTRUTOR",
		AP.NOME AS "MONITOR",
		(AE.RUA + ', nº ' + CAST(AE.NUMERO AS VARCHAR) + ' - ' +
		AE.BAIRRO + ' - ' + AE.CIDADE + ' - ' + AE.ESTADO) AS "ENDEREÇO DO MONITOR"
FROM TURMA T
	INNER JOIN INSTRUTOR AS I
		ON T.COD_INSTRUTOR = I.COD_INSTRUTOR
	INNER JOIN PESSOA AS IP
		ON I.CPF_PESSOA = IP.CPF
	INNER JOIN ENDERECO AS IE
		ON IP.COD_ENDERECO = IE.COD_ENDERECO

	INNER JOIN ALUNO AS A
		ON T.MATRICULA = A.MATRICULA
	INNER JOIN PESSOA AS AP
		ON A.CPF_PESSOA = AP.CPF
	INNER JOIN ENDERECO AS AE
		ON AP.COD_ENDERECO = AE.COD_ENDERECO
GO

SELECT * FROM dbo.uV_TURMA_INFO


-- ALUNO + VIEW(uV_TURMA_INFO)
CREATE VIEW uV_ALUNO_TURMA AS
SELECT	A.MATRICULA,
		P.NOME,
		A.[ALTURA],
		A.[PESO],
		T.HORARIO,
		T.TIPO_TURMA,
		ATV.DESCRICAO AS "ATIVIDADE",
		T.STATUS,
		T.INSTRUTOR AS "INSTRUTOR"
FROM ALUNO AS A
	INNER JOIN PESSOA AS P
		ON A.CPF_PESSOA = P.CPF
	INNER JOIN ALUNO_TURMA AS AT
		ON A.MATRICULA =  AT.MATRICULA
	INNER JOIN uV_TURMA_INFO AS T
		ON AT.COD_TURMA = T.COD_TURMA 
	INNER JOIN ATIVIDADE AS ATV
		ON  ATV.COD_ATIVIDADE = T.COD_TURMA
GO
	
SELECT * FROM [dbo].[uV_ALUNO_TURMA] 


------------------------------------------------------------------------------------------------------------

/* TRIGGERS */

--VERIFICA SE O USUÁRIO QUE ESTÁ SENDO CADASTRADO É DE MENOR, E NÃO SINALIZOU NO CADASTRO QUE TEM RESPONSÁVEL,
-- TAMBÉM VERIFICANDO SE HÁ ALGUM INSTRUTOR DE MENOR, POIS NÃO É PERMTIDO EXERCER A FUNÇÃO SENDO DE MENOR.
CREATE TRIGGER uTR_MENOR_IDADE
ON DBO.PESSOA 
FOR INSERT AS
	DECLARE @DT_NASC DATE,
			@RESP BIT
	
	SELECT @DT_NASC = I.DT_NASC, @RESP = I.RESPONSAVEL FROM INSERTED I
	
	IF ( (DATEDIFF(DAY, @DT_NASC, GETDATE()) / 365) < 18 AND @RESP = 0)
	BEGIN
		RAISERROR('O aluno é de menor, favor adicionar os dados referentes ao responsável!', 16, 1)
		ROLLBACK TRANSACTION
	END

	IF ((DATEDIFF(DAY, @DT_NASC, GETDATE()) / 365) < 18 AND @RESP IS NULL)
	BEGIN 
		RAISERROR('O instrutor não pode ser de menor',16, 1)
		ROLLBACK TRANSACTION
	END
GO

-- É REALIZADO UM CONTROLE SOBRE A QUANTIDADE DE ALUNOS NA TURMA, PARA QUE SEJA 
-- INCREMENTADO OU DECREMENTADO ASSIM QUE SURGIR UMA NOVO ALUNO, TROCA E SAÍDA DE ALUNO DA TURMA
CREATE TRIGGER uTR_CONTROLE_TURMA
ON DBO.ALUNO_TURMA
AFTER INSERT, UPDATE, DELETE AS
BEGIN
	DECLARE	@COD_ANT SMALLINT,
			@COD_NOV SMALLINT

	IF EXISTS (SELECT * FROM DELETED) AND EXISTS (SELECT * FROM INSERTED)
	BEGIN 
		SET @COD_ANT = (SELECT COD_TURMA FROM DELETED)
		SET @COD_NOV = (SELECT COD_TURMA FROM INSERTED)
		
		UPDATE TURMA
		SET QNT_ALUNO = QNT_ALUNO - 1
		WHERE COD_TURMA = @COD_ANT
		
		UPDATE TURMA
		SET QNT_ALUNO = QNT_ALUNO + 1
		WHERE COD_TURMA = @COD_NOV
	END
	IF EXISTS (SELECT * FROM DELETED) AND NOT EXISTS (SELECT * FROM INSERTED)
	BEGIN
		SET @COD_ANT = (SELECT COD_TURMA FROM DELETED)

		UPDATE TURMA
		SET QNT_ALUNO = QNT_ALUNO - 1
		WHERE COD_TURMA = @COD_ANT
	END
	ELSE
	BEGIN
		SET @COD_NOV = (SELECT COD_TURMA FROM INSERTED)

		UPDATE TURMA
		SET QNT_ALUNO = QNT_ALUNO + 1
		WHERE COD_TURMA = @COD_NOV
	END
END
GO

------------------------------------------------------------------------------------------------------------

/* FUNCTIONS */

-- REALIZA A CONVERSÃO DO STATUS QUE NO BANCO ESTÁ COMO BIT, TRANSFORMANDO O MESMO EM TEXTO COMO POR EXEMPLO 'DESATVADO' OU 'ATIVA'
CREATE FUNCTION uF_STATUS
(
@STATUS BIT
)
RETURNS VARCHAR(10) AS
BEGIN
	DECLARE @RESULT VARCHAR(10)

	IF @STATUS = 0
	BEGIN
		SET @RESULT = 'Desativado'
	END
	ELSE
	BEGIN
		SET @RESULT = 'Ativa'
	END

	RETURN @RESULT
END
GO

-- PODE REALIZAR A VERIFICAÇÃO DE HÁ QUANTO TEMPO O INSTRUTOR TRABALHA NA ACADEMIA, 
-- OU DE NO CASO DE DEMISSÃO, QUANTO TEMPO ELE TRABALHOU ATÉ A SUA DEMISSÃO
CREATE FUNCTION uFN_TEMPO_CORRIDO
(
@DataInicial DATE,
@DataFinal DATE
)
RETURNS VARCHAR(40)
AS
BEGIN
	DECLARE 
		@ANO INT,
		@MES INT,
		@DIAS INT
	
	SET @ANO = DATEDIFF(DAY, @DataInicial, @DataFinal) / 365
	SET @MES = DATEDIFF(MONTH, (DATEADD(YEAR, @ANO, @DataInicial)), @DataFinal)

	IF @MES = 12
	BEGIN 
		SET @MES = 11
	END

	SET @DIAS = DATEDIFF(DAY, DATEADD(MONTH, @MES,DATEADD(YEAR, @ANO, @DataInicial)), @DataFinal)

	IF @ANO = 0
	BEGIN
		RETURN CONCAT(@MES, ' meses', ' e ', ABS(@DIAS), ' dias')
	END
	IF @DIAS = 0 AND @MES = 0
	BEGIN
		RETURN CONCAT(@ANO, ' anos')
	END
	IF @MES = 0
	BEGIN
		RETURN CONCAT(@ANO, ' anos', ' e ', ABS(@DIAS), ' dias')
	END
	IF @DIAS = 0
	BEGIN
		RETURN CONCAT(@ANO, ' anos', ' e ', @MES, ' meses')
	END
	
	RETURN CONCAT(@ANO, ' anos ', @MES, ' meses', ' e ', ABS(@DIAS), ' dias')
END
GO

----------------------------------------------------------------------------------------------


/* STORED PROCEDURE */

-- EXIBE OS DADOS RELACIONADO AO SEU IMC, OBTENDO DADOS RELEVANTES SOBRE RISCOS E RECOMENDAÇÕES
CREATE PROC uSP_IMC
(
@PESO DECIMAL(5,2),
@ALTURA DECIMAL(3,2)
) AS
BEGIN
	DECLARE	@IMC DECIMAL(5,2),
			@CLASSIFICACAO VARCHAR(30),
			@RISCO VARCHAR(100),
			@RECOMENDACAO VARCHAR(100)

	SET @IMC = @PESO / (@ALTURA * @ALTURA)

	IF @IMC < 18.5
	BEGIN
		SET	@CLASSIFICACAO = 'Abaixo do peso'
		SET @RISCO = 'Queda capilar, alterações no sistema nervoso (depressão, irritabilidade), no sistema imunológico, debilidade física (fraqueza, falta de disposição) e problemas intestinais.'
		SET @RECOMENDACAO = 'Ingerir alimentos com muitos nutrientes e com pouca gordura saturada e gordura trans.'
	END
	IF @IMC > 18.6 AND @IMC < 24.9
	BEGIN
		SET	@CLASSIFICACAO = 'Peso ideal'
		SET @RISCO = 'Fora de risco'
		SET @RECOMENDACAO = 'Manter peso dentro do normal, e deve fazer sempre os exames de rotina.'
	END
	IF @IMC > 25.0 AND @IMC < 29.9
	BEGIN
		SET	@CLASSIFICACAO = 'Sobrepeso'
		SET @RISCO = 'Colesterol alto, diabetes do tipo 2, triglicérides altas, hipertensão etc.'
		SET @RECOMENDACAO = 'Dependendo da causa do sobrepeso, a pessoa precisa aumentar a rotina de exercícios juntamente com uma dieta balanceada, evitando alimentos como queijo prato, leite integral, manteiga etc.'
	END
	IF @IMC > 30.0 AND @IMC < 34.9
	BEGIN
		SET	@CLASSIFICACAO = 'Obesidade grau 1'
		SET @RISCO = 'Risco moderado de: doenças cardiovasculares, doenças respiratórias, doenças gastrointestinais, diabetes tipo 2, alguns tipos de cânceres, problemas ortopédicos, dores musculares,varizes nos membros inferiores, entre outros.'
		SET @RECOMENDACAO = 'Exercícios físicos, reeducação alimentar, e medicamentos com acompanhamento médico é fundamental para iniciar o processo de emagrecimento.'
	END
	IF @IMC > 35.0 AND @IMC < 39.9
	BEGIN
		SET	@CLASSIFICACAO = 'Obesidade grau 2 (severa)'
		SET @RISCO = 'Risco moderado de: doenças cardiovasculares, doenças respiratórias, doenças gastrointestinais, diabetes tipo 2, alguns tipos de cânceres, problemas ortopédicos, dores musculares,varizes nos membros inferiores, entre outros.'
		SET @RECOMENDACAO = 'Exercícios físicos, reeducação alimentar, e medicamentos com acompanhamento médico é fundamental para iniciar o processo de emagrecimento.'
	END
	IF @IMC > 40.0
	BEGIN
		SET	@CLASSIFICACAO = 'Obesidade grau 3 (móbida)'
		SET @RISCO = 'Risco muito grave de: doenças cardiovasculares, doenças respiratórias, doenças gastrointestinais, diabetes tipo 2, alguns tipos de cânceres, problemas ortopédicos, dores musculares,varizes nos membros inferiores, entre outros.'
		SET @RECOMENDACAO = 'Exercícios físicos, reeducação alimentar, e medicamentos com acompanhamento médico é fundamental para iniciar o processo de emagrecimento.'
	END

	SELECT	@IMC AS "IMC",
			@CLASSIFICACAO AS "CLASSIFICAÇÃO",
			@RISCO AS "RISCO",
			@RECOMENDACAO AS "RECOMENDAÇÃO"
END
GO

exec uSP_IMC 70.0, 1.9


-- CONSULTA A MOVIMENTAÇÃO FINANCEIRA DA ACADEMIA, SEUS GASTOS COM FUNCIONÁRIOS
-- E OS SEUS GANHOS COM SEUS ALUNOS
CREATE PROC uSP_SALDO
AS
BEGIN
	DECLARE @ENTRADA_BRONZE DECIMAL(7,2),
			@ENTRADA_PRATA DECIMAL(7,2),
			@ENTRADA_OURO DECIMAL(7,2),
			@ENTRADA_TOTAL DECIMAL(7,2),
			@SAIDA DECIMAL(7,2),
			@QTDE_ALUNOS INT,
			@QTDE_INTRUTORES INT

	SET @ENTRADA_BRONZE = (SELECT VALOR * QUANTIDADE FROM uV_PACOTE_INFO WHERE PACOTE = 'Bronze')
	SET @ENTRADA_PRATA = (SELECT VALOR * QUANTIDADE FROM uV_PACOTE_INFO WHERE PACOTE = 'Prata')
	SET @ENTRADA_OURO = (SELECT VALOR * QUANTIDADE FROM uV_PACOTE_INFO WHERE PACOTE = 'Ouro')
	SET @ENTRADA_TOTAL = @ENTRADA_BRONZE + @ENTRADA_PRATA + @ENTRADA_OURO
	SET @SAIDA = (SELECT SUM(SALARIO) FROM INSTRUTOR)
	SET @QTDE_ALUNOS = (SELECT COUNT(*) FROM ALUNO)
	SET @QTDE_INTRUTORES = (SELECT COUNT(*) FROM INSTRUTOR)

	SELECT	@QTDE_ALUNOS AS "Nº DE ALUNOS",
			@QTDE_INTRUTORES AS "Nº DE INSTRUTORES",
			@SAIDA AS "SAÍDA",
			@ENTRADA_TOTAL AS "ENTRADA",
			(@ENTRADA_TOTAL - @SAIDA) AS "SALDO"

END
GO

EXEC uSP_SALDO

--Procedures
--Como forma de estimular o aluno, seria o dono conseguir mostrar a evolução do mesmo de acordo com a sua estratégia, seja de emagrecimento,
--seja para ganho de massa muscular ou estabilidade
--utilizados : 2 Joins / 2 Filtros / 1 Procedure / Função de texto /Função de data

DROP PROCEDURE uSP_EVOLUCAO_DO_PESO
CREATE PROCEDURE uSP_EVOLUCAO_DO_PESO(
	@PESOATUAL DECIMAL(5,3), 
	@CPF CHAR(14))
AS
BEGIN
	DECLARE 
		@MES INT,
		@DATAMATRICULA DATE,
		@DATAMATRICULASTRING VARCHAR(10),
		@DIFERENCAPESO DECIMAL(5,3),
		@PESOINICIAL DECIMAL(5,3),
		@RESULTADO VARCHAR(20)
		
	SET @DATAMATRICULA = (SELECT A.DT_MATRICULA FROM ALUNO AS A INNER JOIN PESSOA AS P ON A.CPF_PESSOA = P.CPF WHERE CPF_PESSOA = @CPF)
	SET @DATAMATRICULASTRING  = (SELECT CONVERT(VARCHAR, @DATAMATRICULA,103)) -- Data convertida para o padrão dd/mm/aaaa
	SET @MES = DATEDIFF(MONTH, @DATAMATRICULA, GETDATE())
	SET @PESOINICIAL = (SELECT ALUNO.PESO FROM ALUNO INNER JOIN PESSOA ON ALUNO.CPF_PESSOA = PESSOA.CPF WHERE PESSOA.CPF = @CPF) 
	SET @DIFERENCAPESO = @PESOINICIAL - @PesoAtual

	IF @PESOINICIAL > @PESOATUAL
	BEGIN
		SET @RESULTADO = CONCAT('EMAGRECEU ', ABS(@DIFERENCAPESO), ' KG') 
	END

	IF @PESOINICIAL < @PESOATUAL
	BEGIN
		SET @RESULTADO = CONCAT('ENGORDOU ', ABS(@DIFERENCAPESO), ' KG') 
	END

	IF @PESOINICIAL = @PESOATUAL
	BEGIN
		SET @RESULTADO = 'ESTÁVEL'
	END

	SELECT @DATAMATRICULASTRING AS 'DATA MATRÍCULA',
		   @MES AS 'QTD MESES', @PESOINICIAL AS 'PESO INICIAL', @PESOATUAL AS 'PESO ATUAL',
		   @RESULTADO AS 'RESULTADO' ;
	
END

EXEC uSP_EVOLUCAO_DO_PESO 82.800,'111.687.438-50'
GO


/*View - Retorna o número de alunos por atividade, cujo objetivo é ter um relatório das atividades mais frequentadas, e estimular de alguma forma 
		 a adesão por outras turmas
Utilizados:  4 Joins / 1 AGREGAÇÃO / 1 VIEW
*/
CREATE VIEW uV_ALUNO_ATIVIDADE AS	
SELECT COUNT(*) AS "QUANTIDADE DE ALUNOS",
	   ATIV.DESCRICAO AS "ATIVIDADE"
FROM PESSOA AS P
	INNER JOIN ALUNO AS A
		ON P.CPF = A.CPF_PESSOA
	INNER JOIN ALUNO_TURMA AS AT
		ON A.MATRICULA = AT.MATRICULA
	INNER JOIN TURMA AS T
		ON AT.COD_TURMA = T.COD_TURMA
	INNER JOIN ATIVIDADE AS ATIV
		ON  ATIV.COD_ATIVIDADE = T.COD_ATIVIDADE
GROUP BY ATIV.DESCRICAO


SELECT * FROM uV_ALUNO_ATIVIDADE
GO


/*Procedures
  Exibe um relatório com a quantidade de pacotes ativos no primeiro dia de cada mes de um determinado ano.
  utilizados : 12 filtros / 1 Procedure
*/
DROP PROCEDURE uSP_QUANTIDADE_DE_PACOTES_MENSAL
CREATE PROCEDURE uSP_QUANTIDADE_DE_PACOTES_MENSAL(
@ANO VARCHAR(4)
)
AS
BEGIN
	DECLARE @JANEIRO INT , @FEVEREIRO INT,@MARCO INT,@ABRIL INT,@MAIO INT,@JUNHO INT,@JULHO INT,@AGOSTO INT,
			@SETEMBRO INT, @OUTUBRO INT, @NOVEMBRO INT,@DEZEMBRO INT

	SET @JANEIRO = (SELECT COUNT(*) FROM PACOTE WHERE DT_INICIAL_PAC < CONVERT(DATE, CONCAT(@ANO,'-01-01')) AND DT_FINAL_PAC > CONVERT(DATE, CONCAT(@ANO,'-01-01')))
	SET @FEVEREIRO = (SELECT COUNT(*) FROM PACOTE WHERE DT_INICIAL_PAC < CONVERT(DATE, CONCAT(@ANO,'-02-01')) AND DT_FINAL_PAC > CONVERT(DATE, CONCAT(@ANO,'-02-01')))
	SET @MARCO = (SELECT COUNT(*) FROM PACOTE WHERE DT_INICIAL_PAC < CONVERT(DATE, CONCAT(@ANO,'-03-01')) AND DT_FINAL_PAC > CONVERT(DATE, CONCAT(@ANO,'-03-01')))
	SET @ABRIL = (SELECT COUNT(*) FROM PACOTE WHERE DT_INICIAL_PAC < CONVERT(DATE, CONCAT(@ANO,'-04-01')) AND DT_FINAL_PAC > CONVERT(DATE, CONCAT(@ANO,'-04-01')))
	SET @MAIO = (SELECT COUNT(*) FROM PACOTE WHERE DT_INICIAL_PAC < CONVERT(DATE, CONCAT(@ANO,'-05-01')) AND DT_FINAL_PAC > CONVERT(DATE, CONCAT(@ANO,'-05-01')))
	SET @JUNHO = (SELECT COUNT(*) FROM PACOTE WHERE DT_INICIAL_PAC < CONVERT(DATE, CONCAT(@ANO,'-06-01')) AND DT_FINAL_PAC > CONVERT(DATE, CONCAT(@ANO,'-06-01')))
	SET @JULHO = (SELECT COUNT(*) FROM PACOTE WHERE DT_INICIAL_PAC < CONVERT(DATE, CONCAT(@ANO,'-07-01')) AND DT_FINAL_PAC > CONVERT(DATE, CONCAT(@ANO,'-07-01')))
	SET @AGOSTO = (SELECT COUNT(*) FROM PACOTE WHERE DT_INICIAL_PAC < CONVERT(DATE, CONCAT(@ANO,'-08-01')) AND DT_FINAL_PAC > CONVERT(DATE, CONCAT(@ANO,'-08-01')))
	SET @SETEMBRO = (SELECT COUNT(*) FROM PACOTE WHERE DT_INICIAL_PAC < CONVERT(DATE, CONCAT(@ANO,'-09-01')) AND DT_FINAL_PAC > CONVERT(DATE, CONCAT(@ANO,'-09-01')))
	SET @OUTUBRO = (SELECT COUNT(*) FROM PACOTE WHERE DT_INICIAL_PAC < CONVERT(DATE, CONCAT(@ANO,'-10-01')) AND DT_FINAL_PAC > CONVERT(DATE, CONCAT(@ANO,'-10-01')))
	SET @NOVEMBRO = (SELECT COUNT(*) FROM PACOTE WHERE DT_INICIAL_PAC < CONVERT(DATE, CONCAT(@ANO,'-11-01')) AND DT_FINAL_PAC > CONVERT(DATE, CONCAT(@ANO,'-11-01')))
	SET @DEZEMBRO = (SELECT COUNT(*) FROM PACOTE WHERE DT_INICIAL_PAC < CONVERT(DATE, CONCAT(@ANO,'-12-01')) AND DT_FINAL_PAC > CONVERT(DATE, CONCAT(@ANO,'-12-01')))
	
	SELECT @JANEIRO AS QTD_JANEIRO, @FEVEREIRO AS QTD_FEVEREIRO, @MARCO AS QTD_MARCO, @ABRIL AS QTD_ABRIL, @MAIO AS QTD_MAIO, @JUNHO AS QTD_JUNHO, 
	@JULHO AS QTD_JULHO, @AGOSTO AS QTD_AGOSTO, @SETEMBRO AS QTD_SETEMBRO, @OUTUBRO AS QTD_OUTUBRO, @NOVEMBRO AS QTD_NOVEMBRO, @DEZEMBRO AS QTD_DEZEMBRO

END
GO

EXEC uSP_QUANTIDADE_DE_PACOTES_MENSAL '2019'


-- PROCEDURE
-- Permite pegar 3 parametros sobre horarios e datas disponiveis do aluno, cria uma pesquisa dentro das turmas existentes, nos retornando turmas
-- que estão disponiveis ativas, ou turmas desativadas por falta de aluno dentro das limitações de horarios e data imposta pelo aluno. 
CREATE PROC uSP_TURMA_HORARIO
(
	@HORARIO_INICIAL TIME(0),
	@HORARIO_FINAL TIME(0),
	@INTERVALO_INICIAL DATE,
	@INTERVALO_FINAL DATE
)
AS
BEGIN

	SELECT 
	T.HORARIO, 
	T.TIPO_TURMA,
	T.DT_INICIAL,
	T.DT_FINAL,
	T.STATUS_TURMA AS 'STATUS',
	A.DESCRICAO
	FROM
		TURMA AS T
	INNER JOIN ATIVIDADE AS A ON (T.COD_ATIVIDADE = A.COD_ATIVIDADE)
	WHERE (T.HORARIO BETWEEN @HORARIO_INICIAL AND @HORARIO_FINAL ) AND (T.DT_INICIAL BETWEEN @INTERVALO_INICIAL AND @INTERVALO_FINAL) 
END
GO

-- EXEMPLO 
EXEC uSP_TURMA_HORARIO '19:30:00', '22:30:00', '2020-08-08', '2020-10-01'
GO

--VIEW
--View para ter todas as informações do aluno, podendo ter a flexibilidade de ter as informações especificas mais rapido e mais rapido.

CREATE VIEW uV_ALUNO_INFO AS 
SELECT 
	P.CPF,
	P.NOME,
	P.DT_NASC AS 'NASCIMENTO',
	P.RG,
	PA.TIPO_PAC AS 'TIPO',
	A.PESO,
	A.ALTURA,
	ED.ESTADO,
	ED.CIDADE,
	ED.BAIRRO,
	ED.RUA,
	ED.NUMERO,
	T.NUMERO AS 'TELEFONE'
FROM
	ALUNO AS A
INNER JOIN PESSOA AS P ON (A.CPF_PESSOA = P.CPF)
INNER JOIN ENDERECO AS ED ON (P.COD_ENDERECO = ED.COD_ENDERECO)
INNER JOIN TELEFONE AS T ON (P.CPF = T.CPF_PESSOA)
INNER JOIN PACOTE AS PA ON (A.COD_PACOTE = PA.COD_PACOTE)


-- EXEMPLO
SELECT * FROM uV_ALUNO_INFO

-- Function table que retorna o dado do tipo de pacote de uma matricula passada por parametro. 

CREATE FUNCTION uFN_TIPO_MATRICULA
(
@MATRICULA INT
)
RETURNS TABLE
AS
RETURN 
(
SELECT 
	P.TIPO_PAC 
FROM ALUNO AS A
INNER JOIN PACOTE AS P ON (P.COD_PACOTE = A.COD_PACOTE)
WHERE A.MATRICULA = @MATRICULA
)
GO

-- Exemplo:

SELECT * FROM dbo.uFN_TIPO_MATRICULA(1008)



--Trigger para controlar a matricula do aluno em novas turmas quando ele já chegou na quantidade máxima de turmas do seu pacote.

CREATE TRIGGER tgr_QUANTIDADE_ALUNO_TURMAS ON dbo.ALUNO_TURMA
FOR INSERT AS 
BEGIN
	DECLARE @QTDE INT,
			@MATRICULA INT,
			@TIPO VARCHAR(20)
	SET @QTDE = (SELECT 
		COUNT(P.COD_PACOTE) AS 'QUANTIDADE'
	FROM
		ALUNO_TURMA AS AT
		INNER JOIN ALUNO AS A ON (A.MATRICULA = AT.MATRICULA)
		INNER JOIN PACOTE AS P ON (P.COD_PACOTE = A.COD_PACOTE)
		GROUP BY A.MATRICULA
		HAVING A.MATRICULA = (SELECT MATRICULA FROM inserted))
	SET @MATRICULA = (SELECT MATRICULA FROM inserted)
	SET @TIPO = (SELECT * FROM dbo.uFN_TIPO_MATRICULA(@MATRICULA))

	IF (@TIPO = 'Bronze')
	BEGIN
		IF(@QTDE > 1)
		BEGIN
		RAISERROR('O aluno está matriculado na quantidade máxima que seu pacote permite.', 16, 1)
		ROLLBACK TRANSACTION
		END
	END
	IF (@TIPO = 'Prata')
	BEGIN
		IF(@QTDE > 4)
		BEGIN
		RAISERROR('O aluno está matriculado na quantidade máxima que seu pacote permite.', 16, 1)
		ROLLBACK TRANSACTION
		END
	END
END
GO

-- STORED PROCEDURE QUE FAZ UMA CONSULTA COM AGREGAÇÃO UTILIZANDO JOIN
-- PARA SABER O TOTAL DE FALTAS DOS ALUNOS EM UMA DETERMINADA TURMA E EM UM DETERMINADO INTERVALO DE TEMPO


CREATE PROCEDURE uSP_FALTAS_ALUNOS_TURMA
(
@DATA_INICIO DATETIME2,	-- Data na qual você deseja iniciar a pesquisa.	
@DATA_FIM DATETIME2,	-- Até quando você quer que vá a pesquisa.
@TURMA SMALLINT			-- Código da turma na qual você deseja pesquisar as faltas dos alunos.
)
AS
BEGIN
	SELECT
	T.COD_TURMA,
	ATIV.DESCRICAO,
	A.MATRICULA,
	P.NOME,
	COUNT(F.DT_FALTA) AS 'TOTAL DE FALTAS'
	FROM PESSOA AS P
		INNER JOIN ALUNO AS A
			ON P.CPF = A.CPF_PESSOA
		INNER JOIN ALUNO_TURMA AS AT
			ON A.MATRICULA = AT.MATRICULA
		INNER JOIN TURMA AS T
			ON AT.COD_TURMA = T.COD_TURMA
		INNER JOIN FREQUENCIA AS F
			ON F.COD_ALUNO_TURMA = AT.COD_ALUNO_TURMA
		INNER JOIN ATIVIDADE AS ATIV
			ON T.COD_ATIVIDADE = ATIV.COD_ATIVIDADE
	WHERE F.DT_FALTA BETWEEN @DATA_INICIO AND @DATA_FIM
	GROUP BY T.COD_TURMA, ATIV.DESCRICAO, A.MATRICULA, P.NOME
	HAVING T.COD_TURMA = @TURMA
END	


EXEC uSP_FALTAS_ALUNOS_TURMA '2020-01-01','2020-06-30', 1  
-- Retorna o total de faltas de todos os alunos no primeiro semestre da Turma 1.



